/**********************************************************************
 Java CUP specification for a parser for minim programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT; 
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                INPUT;
terminal                DISP;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT; //done
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS; //done
terminal                MINUS; //done
terminal                TIMES; //done
terminal                DIVIDE; //done
terminal                NOT; //done
terminal                AND; //done
terminal                OR; //done
terminal                EQUALS; //done
terminal                NOTEQUALS; //done
terminal                LESS; //done
terminal                GREATER; //done
terminal                LESSEQ; //done
terminal                GREATEREQ; //done
terminal                ASSIGN; //done
terminal                UMINUS; //done


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;

non terminal LinkedList       varDeclList; //good
non terminal FnDeclNode       fnDecl; //good 
non terminal FnBodyNode       fnBody; //good
non terminal StructDeclNode   structDecl; //good
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt; //good
non terminal AssignExpNode    assignExp; //good
non terminal ExpNode          exp; //good
non terminal ExpNode          term; //good
non terminal FormalsListNode  formals; //good
non terminal LinkedList       formalsList; //good
non terminal FormalDeclNode   formalDecl; //good
non terminal LinkedList       structBody; //good
non terminal ExpNode          loc; //good
non terminal CallExpNode      fncall; //good
non terminal LinkedList       actualList; //good


 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS, NOT; 

precedence left DOT; //check precedence before proceeding


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                |   /* epsilon */
                {:  RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {:  RESULT = v;
                :}
                |   fnDecl:fd
                {:  RESULT = fd;
                :}
                |   structDecl:sd
                {:  RESULT = sd;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {:  RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                |   STRUCT id:idone id:idtwo SEMICOLON
                {:  RESULT = new VarDeclNode( new StructNode(idone), idtwo, 0); 
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                |   BOOL
                {:  RESULT = new BoolNode();
                :}
                |   VOID
                {:  RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
                {: vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;
                
fnBody          ::= LCURLY varDeclList:vl stmtList:sl RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(vl), new StmtListNode(sl));
                :}
                ; 

fnDecl          ::= type:t id:i formals:f fnBody:fb
                {:  RESULT = new FnDeclNode(t, i, f, fb);
                :}
                ;
                
structDecl      ::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
                {:  RESULT = new StructDeclNode(i, new DeclListNode(sb));
                :}
                ;

structBody      ::= structBody:sb varDecl:vd
                {:  sb.addLast(vd);
                    RESULT = sb;
                :}
                |   varDecl:vd
                {:  LinkedList<DeclNode> list = new LinkedList<DeclNode>();
                    list.addLast(vd);
                    RESULT = list;
                    
                :}
                ;
				

formalDecl      ::= type:t id:i
                {:  RESULT = new FormalDeclNode(t, i);
                :}
                ;

formalsList     ::= formalDecl:fd
                {:  LinkedList<FormalDeclNode> list = new LinkedList<FormalDeclNode>();
                    list.addLast(fd);
                    RESULT = list;
                :}
                |   formalDecl:fd COMMA formalsList:ls
                {:  ls.add(fd);
                    RESULT = ls;
                :}
                ;

formals         ::= LPAREN RPAREN
                {:  RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                |   LPAREN formalsList:fl RPAREN
                {:  RESULT = new FormalsListNode(fl);
                :}
                ;

loc             ::= id:i
                {:  RESULT = i;
                :}
                |   loc:l DOT id:i
                {:  RESULT = new DotAccessExpNode(l,i);
                :}
                ;

fncall          ::= id:i LPAREN RPAREN
                {:  RESULT = new CallExpNode(i);
                :}
                |   id:i LPAREN actualList:al RPAREN
                {:  RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;


actualList      ::= exp:e
                {:  LinkedList<ExpNode> list = new LinkedList<ExpNode>();
                    list.addLast(e);
                    RESULT = list;
                :}
                |   actualList:al COMMA exp:e
                {:  al.add(e);
                    RESULT = al;
                :}
                ;

term            ::= loc:l
                {:  RESULT = l;
                :}
                |   INTLITERAL:i
                {:  RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
                :}
                |   STRINGLITERAL:s
                {:  RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal);
                :}
                |   TRUE:t
                {:  RESULT = new TrueNode(t.lineNum, t.charNum);
                :}
                |   FALSE:f
                {:  RESULT = new FalseNode(f.lineNum, f.charNum);
                :}
                |   LPAREN exp:e RPAREN
                {:  RESULT = e;
                :}
                |   fncall:fn
                {:  RESULT = fn;
                :}
                ;

exp             ::= assignExp:aezzz
                {:  RESULT = aezzz;
                :}
                |   exp:a PLUS exp:b
                {:  RESULT = new PlusNode(a, b);
                :}
                |   exp:a MINUS exp:b
                {:  RESULT = new MinusNode(a, b);
                :}
                |   exp:a TIMES exp:b
                {:  RESULT = new TimesNode(a, b);
                :}
                |   exp:a DIVIDE exp:b
                {:  RESULT = new DivideNode(a, b);
                :}
                |   NOT exp:a  
                {:  RESULT = new NotNode(a);
                :}
                |   exp:a AND exp:b
                {:  RESULT = new AndNode(a, b);
                :}
                |   exp:a OR exp:b
                {:  RESULT = new OrNode(a, b);
                :}
                |   exp:a EQUALS exp:b
                {:  RESULT = new EqualsNode(a, b);
                :}
                |   exp:a NOTEQUALS exp:b
                {:  RESULT = new NotEqualsNode(a, b);
                :}
                |   exp:a LESS exp:b
                {:  RESULT = new LessNode(a, b);
                :}
                |   exp:a GREATER exp:b
                {:  RESULT = new GreaterNode(a,b);
                :}
                |   exp:a LESSEQ exp:b
                {:  RESULT = new LessEqNode(a, b);
                :}
                |   exp:a GREATEREQ exp:b
                {:  RESULT = new GreaterEqNode(a, b);
                :}
                |   MINUS term:t
                {:  RESULT = new UnaryMinusNode(t);
                :}
                |   term:t
                {:  RESULT = t;
                :}
                ;
                
assignExp       ::= loc:l ASSIGN exp:e
                {:  RESULT = new AssignExpNode(l, e);
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {:  sl.addLast(s);
                    RESULT = sl;
                :}
                |   /* epsilon */ 
                {:  RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:ae SEMICOLON
                {:  RESULT = new AssignStmtNode(ae);
                :}
                |   loc:l PLUSPLUS SEMICOLON
                {:  RESULT = new PostIncStmtNode(l);
                :}
                |   loc:l MINUSMINUS SEMICOLON
                {:  RESULT = new PostDecStmtNode(l);
                :}
                |   INPUT READ loc:l SEMICOLON
                {:  RESULT = new ReadStmtNode(l);
                :}
                |   DISP WRITE exp:e SEMICOLON
                {:  RESULT = new WriteStmtNode(e);
                :}
                |   IF exp:e LCURLY varDeclList:vdl stmtList:sl RCURLY
                {:  RESULT = new IfStmtNode(e, new DeclListNode(vdl), new StmtListNode(sl));
                :}
                |   IF exp:e LCURLY varDeclList:ifvdl stmtList:ifsl RCURLY ELSE LCURLY varDeclList:elsevdl stmtList:elsesl RCURLY
                {:  DeclListNode ifVDNode = new DeclListNode(ifvdl);
                    StmtListNode ifStmtListNode = new StmtListNode(ifsl);
                    DeclListNode elseVDNode = new DeclListNode(elsevdl);
                    StmtListNode elseStmtListNode = new StmtListNode(elsesl);
                    RESULT = new IfElseStmtNode(e, ifVDNode, ifStmtListNode, elseVDNode, elseStmtListNode);
                :}
                |   WHILE exp:e LCURLY varDeclList:vdl stmtList:sl RCURLY
                {:  WhileStmtNode wsNode = new WhileStmtNode(e, new DeclListNode(vdl), new StmtListNode(sl));
                    RESULT = wsNode;
                :}
                |   RETURN exp:e SEMICOLON
                {:  RESULT = new ReturnStmtNode(e);
                :}
                |   RETURN SEMICOLON
                {:  RESULT = new ReturnStmtNode(null);
                :}
                |   fncall:fn SEMICOLON
                {:  RESULT = new CallStmtNode(fn);
                :}
                ;







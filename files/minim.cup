/**********************************************************************
 Java CUP specification for a parser for minim programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT; 
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                INPUT;
terminal                DISP;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT; //done
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS; //done
terminal                MINUS; //done
terminal                TIMES; //done
terminal                DIVIDE; //done
terminal                NOT; //done
terminal                AND; //done
terminal                OR; //done
terminal                EQUALS; //done
terminal                NOTEQUALS; //done
terminal                LESS; //done
terminal                GREATER; //done
terminal                LESSEQ; //done
terminal                GREATEREQ; //done
terminal                ASSIGN; //done
terminal                UMINUS; //done


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;

non terminal LinkedList       varDeclList; //good
non terminal FnDeclNode       fnDecl; //good 
non terminal FnBodyNode       fnBody; //good
non terminal StructDeclNode   structDecl;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal LinkedList       structBody;
non terminal ExpNode          loc;
non terminal CallExpNode      fnCall;
non terminal LinkedList       actuaList;


 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS, NOT; 

precedence left DOT; //check precedence before proceeding


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
                {: vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;
                
fnBody          ::= LCURLY varDeclList:vl stmtList:sl RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(vl), new StmtListNode(sl));
                :}
                ; 

fnDecl          ::= type:t id:i formals:f fnBody:fb
                {:  RESULT = new FnDeclNode(t, i, f, fb);
                :}
                ;

structBody      ::= structBody:sb varDecl:vd
                {:  sb.addLast(vd);
                    RESULT = sb;
                :}
                |   varDecl:vd
                {:  RESULT = new LinkedList<DeclNode>();
                :}
                ;
				
structDecl      ::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
                {:  RESULT = new StructDeclNode(i, new DeclListNode(sb));
                :}
                ;

formalDecl      ::= type:t id:i
                {:  RESULT = new FormalDeclNode(t, i);
                :}
                ;

formalsList     ::= formalDecl:fd
                {:  LinkedList<FormalDeclNode> list = new LinkedList<FormalDeclNode>();
                    list.addLast(fd);
                    RESULT = list;
                :}
                |   formalDecl:fd COMMA formalsList:ls
                {:  ls.add(fd);
                    RESULT = ls;
                :}
                ;

formals         ::= LPAREN RPAREN
                {:  RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                |   LPAREN formalsList:fl RPAREN
                {:  RESULT = new FormalsListNode(fl);
                :}
                ;









